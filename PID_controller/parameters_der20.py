import numpy as np
import math

DER_num = 20
lines_num = 20
loads_num = 10
sampling_time = 0.05
state_dim = 9

pi = math.pi
# --------Parameter values--------------
Lc = .35e-3
rLc = .03
wc = 31.41

rN = 1e4
wref = 2 * pi * 60
Vnom = 480.0

mp1 = 9.4e-5
mp2 = mp1
mp6 = 12.5e-5
mp7 = mp6
mp3 = 9.4e-5
mp4 = mp3
mp8 = 12.5e-5
mp9 = mp8
mp5 = 9.4e-5
mp11 = mp5
mp10 = 12.5e-5
mp16 = mp10
mp12 = 9.4e-5
mp13 = mp12
mp17 = 12.5e-5
mp18 = mp17
mp14 = 9.4e-5
mp15 = mp14
mp19 = 12.5e-5
mp20 = mp19

nq1 = 1.3e-3
nq2 = nq1
nq6 = 1.5e-3
nq7 = nq6
nq3 = 1.3e-3
nq4 = nq3
nq8 = 1.5e-3
nq9 = nq8
nq5 = 1.3e-3
nq11 = nq5
nq10 = 1.5e-3
nq16 = nq10
nq12 = 1.3e-3
nq13 = nq12
nq17 = 1.5e-3
nq18 = nq17
nq14 = 1.3e-3
nq15 = nq14
nq19 = 1.5e-3
nq20 = nq19

# ---------------
kp = 4
ki = 60

# ----Network Data-------
rline1 = .23
Lline1 = .1 / (2 * pi * 60)
rline2 = .35
Lline2 = .58 / (2 * pi * 60)
rline3 = .23
Lline3 = .1 / (2 * pi * 60)
rline4 = .23
Lline4 = .1 / (2 * pi * 60)
rline5 = .35
Lline5 = .58 / (2 * pi * 60)
rline6 = .23
Lline6 = .1 / (2 * pi * 60)
rline7 = .23
Lline7 = .1 / (2 * pi * 60)
rline8 = .35
Lline8 = .58 / (2 * pi * 60)
rline9 = .23
Lline9 = .1 / (2 * pi * 60)
rline10 = .23
Lline10 = .1 / (2 * pi * 60)
rline11 = .35
Lline11 = .58 / (2 * pi * 60)
rline12 = .23
Lline12 = .1 / (2 * pi * 60)
rline13 = .23
Lline13 = .1 / (2 * pi * 60)
rline14 = .35
Lline14 = .58 / (2 * pi * 60)
rline15 = .23
Lline15 = .1 / (2 * pi * 60)
rline16 = .23
Lline16 = .1 / (2 * pi * 60)
rline17 = .35
Lline17 = .58 / (2 * pi * 60)
rline18 = .23
Lline18 = .1 / (2 * pi * 60)
rline19 = .23
Lline19 = .1 / (2 * pi * 60)
rline20 = .35
Lline20 = .58 / (2 * pi * 60)

QF = 0.5
Rload1 = 2
Lload1 = QF * 2 / (2 * pi * 60)
Rload2 = 2
Lload2 = QF * 1 / (2 * pi * 60)
Rload3 = 2
Lload3 = QF * 2 / (2 * pi * 60)
Rload4 = 2
Lload4 = QF * 1 / (2 * pi * 60)
Rload5 = 2
Lload5 = QF * 2 / (2 * pi * 60)
Rload6 = 2
Lload6 = QF * 1 / (2 * pi * 60)
Rload7 = 2
Lload7 = QF * 2 / (2 * pi * 60)
Rload8 = 2
Lload8 = QF * 1 / (2 * pi * 60)
Rload9 = 2
Lload9 = QF * 2 / (2 * pi * 60)
Rload10 = 2
Lload10 = QF * 1 / (2 * pi * 60)

# ------------Controller Parameters------------------------
a_ctrl = 400
# Physical Graph
# AP = 40 * np.array([[0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
#                     [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
#                     [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],  # 3
#                     [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
#                     [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
#                     [0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],  # 6
#                     [0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],  # 7
#                     [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
#                     [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
#                     [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],  # 10
#                     [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],  # 11
#                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],  # 12
#                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0],  # 13
#                     [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],  # 14
#                     [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0],  # 15
#                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0],  # 16
#                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1],  # 17
#                     [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0],  # 18
#                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],  # 19
#                     [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0]])  # 20

AP = 60 * np.array([[.0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1],
                    [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0],
                    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1],
                    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]])

D = np.array([[sum(AP[0]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, sum(AP[1]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, sum(AP[2]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, sum(AP[3]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, sum(AP[4]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, sum(AP[5]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, sum(AP[6]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, sum(AP[7]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, sum(AP[8]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, sum(AP[9]), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, sum(AP[10]), 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, sum(AP[11]), 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, sum(AP[12]), 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, sum(AP[13]), 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, sum(AP[14]), 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, sum(AP[15]), 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, sum(AP[16]), 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, sum(AP[17]), 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, sum(AP[18]), 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, sum(AP[19])]])

L = D - AP

# Pinning gain to the reference frequency
G = np.array([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])

# # matrix for bus and load connection
# BUS_LOAD = np.array([1, 0, 1, 0, 1,
#                      0, 1, 0, 1, 0,
#                      1, 0, 1, 0, 1,
#                      0, 1, 0, 1, 0])

# matrix for bus connection
# BUSES = np.array([[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
#                   [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
#                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
#                   [0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
#                   [0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
#                   [0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
#                   [0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
#                   [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
#                   [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
#                   [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],  # 10
#                   [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
#                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],  # 12
#                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],  # 13
#                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0],  # 14
#                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0],  # 15
#                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],  # 16
#                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0],  # 17
#                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0],  # 18
#                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],  # 19
#                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]])  # 20

# Fig. 18
# Physical_Graph = np.array([[0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
#                            [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
#                            [0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
#                            [0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
#                            [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
#                            [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
#                            [0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
#                            [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],  # 8
#                            [0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],  # 9
#                            [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],  # 10
#                            [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],  # 11
#                            [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0],  # 12
#                            [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0],  # 13
#                            [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0],  # 14
#                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],  # 15
#                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],  # 16
#                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0],  # 17
#                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0],  # 18
#                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1],  # 19
#                            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0]])  # 20
#
# Distance_Mask = np.array([[0, 1, 2, 3, 4, 1, 2, 3, 4, 5, 2, 3, 4, 5, 6, 3, 4, 5, 6, 7],  # 1
#                           [1, 0, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 3, 4, 5, 4, 3, 4, 5, 6],  # 2
#                           [2, 1, 0, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 3, 4, 5, 4, 3, 4, 5],  # 3
#                           [3, 2, 1, 0, 1, 4, 3, 2, 1, 2, 5, 4, 3, 2, 3, 6, 5, 4, 3, 4],  # 4
#                           [4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2, 7, 6, 5, 4, 3],  # 5
#                           [1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 4, 5, 2, 3, 4, 5, 6],  # 6
#                           [2, 1, 2, 3, 4, 1, 0, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 3, 4, 5],  # 7
#                           [3, 2, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 2, 3, 4, 3, 2, 3, 4],  # 8
#                           [4, 3, 2, 1, 2, 3, 2, 1, 0, 1, 4, 3, 2, 1, 2, 5, 4, 3, 2, 3],  # 9
#                           [5, 4, 3, 2, 1, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1, 6, 5, 4, 3, 2],  # 10
#                           [2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 1, 2, 3, 4, 5],  # 11
#                           [3, 2, 3, 4, 5, 2, 1, 2, 3, 4, 1, 0, 1, 2, 3, 2, 1, 2, 3, 4],  # 12
#                           [4, 3, 2, 3, 4, 3, 2, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 2, 3],  # 13
#                           [5, 4, 3, 2, 3, 4, 3, 2, 1, 2, 3, 2, 1, 0, 1, 4, 3, 2, 1, 2],  # 14
#                           [6, 5, 4, 3, 2, 5, 4, 3, 2, 1, 4, 3, 2, 1, 0, 5, 4, 3, 2, 1],  # 15
#                           [3, 4, 5, 6, 7, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4],  # 16
#                           [4, 3, 4, 5, 6, 3, 2, 3, 4, 5, 2, 1, 2, 3, 4, 1, 0, 1, 2, 3],  # 17
#                           [5, 4, 3, 4, 5, 4, 3, 2, 3, 4, 3, 2, 1, 2, 3, 2, 1, 0, 1, 2],  # 18
#                           [6, 5, 4, 3, 4, 5, 4, 3, 2, 3, 4, 3, 2, 1, 2, 3, 2, 1, 0, 1],  # 19
#                           [7, 6, 5, 4, 3, 6, 5, 4, 3, 2, 5, 4, 3, 2, 1, 4, 3, 2, 1, 0]])  # 20

# Fig 17
Physical_Graph = np.array([[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
                           [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
                           [0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
                           [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
                           [0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
                           [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
                           [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
                           [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
                           [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
                           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],  # 10
                           [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],  # 11
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],  # 12
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0],  # 13
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],  # 14
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],  # 15
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],  # 16
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],  # 17
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],  # 18
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0],  # 19
                           [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]])  # 20

Distance_Mask = np.array([[0, 3, 4, 7, 8, 1, 2, 5, 6, 9, 6, 9, 10, 13, 14, 7, 8, 11, 12, 15],  # 1
                          [3, 0, 1, 4, 5, 2, 1, 2, 3, 6, 4, 7, 8, 11, 12, 5, 6, 9, 10, 13],  # 2
                          [4, 1, 0, 3, 4, 3, 2, 1, 2, 5, 2, 5, 6, 9, 10, 3, 4, 7, 8, 11],  # 3
                          [7, 4, 3, 0, 1, 6, 5, 2, 1, 2, 3, 6, 3, 6, 7, 4, 5, 4, 5, 8],  # 4
                          [8, 5, 4, 1, 0, 7, 6, 3, 2, 1, 4, 3, 2, 5, 6, 5, 4, 3, 4, 7],  # 5
                          [1, 2, 3, 6, 7, 0, 1, 4, 5, 8, 5, 8, 9, 12, 13, 6, 7, 10, 11, 14],  # 6
                          [2, 1, 2, 5, 6, 1, 0, 3, 4, 7, 4, 7, 8, 11, 12, 5, 6, 9, 10, 13],  # 7
                          [5, 2, 1, 2, 3, 4, 3, 0, 1, 4, 1, 4, 5, 8, 9, 2, 3, 5, 6, 9],  # 8
                          [6, 3, 2, 1, 2, 5, 4, 1, 0, 3, 2, 5, 4, 7, 8, 3, 4, 5, 6, 9],  # 9
                          [9, 6, 5, 2, 1, 8, 7, 4, 3, 0, 5, 2, 1, 4, 5, 4, 3, 2, 3, 6],  # 10
                          [6, 3, 2, 3, 4, 5, 4, 1, 2, 5, 0, 3, 4, 7, 8, 1, 2, 5, 6, 9],  # 11
                          [9, 6, 5, 4, 3, 8, 7, 4, 5, 2, 3, 0, 1, 4, 5, 2, 1, 2, 3, 6],  # 12
                          [10, 7, 6, 3, 2, 9, 8, 5, 4, 1, 4, 1, 0, 3, 4, 3, 2, 1, 2, 5],  # 13
                          [13, 10, 9, 6, 5, 12, 11, 8, 7, 4, 7, 4, 3, 0, 1, 6, 5, 2, 1, 2],  # 14
                          [14, 11, 10, 7, 6, 13, 12, 9, 8, 5, 8, 5, 4, 1, 0, 7, 6, 3, 2, 1],  # 15
                          [7, 4, 3, 4, 5, 6, 5, 2, 3, 6, 1, 2, 3, 6, 7, 0, 1, 4, 5, 8],  # 16
                          [8, 5, 4, 5, 4, 7, 6, 3, 4, 3, 2, 1, 2, 5, 6, 1, 0, 3, 4, 7],  # 17
                          [11, 8, 7, 4, 3, 10, 9, 6, 5, 2, 5, 2, 1, 2, 3, 4, 3, 0, 1, 4],  # 18
                          [12, 9, 8, 5, 4, 11, 10, 7, 6, 3, 6, 3, 2, 1, 2, 5, 4, 1, 0, 3],  # 19
                          [15, 12, 11, 8, 7, 14, 13, 10, 9, 6, 9, 6, 5, 2, 1, 8, 7, 4, 3, 0]])  # 20

# DER_dic = np.array([[Rload1, Lload1, mp1, nq1],
#                     [0, 0, mp2, nq2],
#                     [Rload2, Lload2, mp3, nq3],
#                     [0, 0, mp4, nq4],
#                     [Rload3, Lload3, mp5, nq5],
#                     [0, 0, mp6, nq6],
#                     [Rload4, Lload4, mp7, nq7],
#                     [0, 0, mp8, nq8],
#                     [Rload5, Lload5, mp9, nq9],
#                     [0, 0, mp10, nq10],
#                     [Rload6, Lload6, mp11, nq11],
#                     [0, 0, mp12, nq12],
#                     [Rload7, Lload7, mp13, nq13],
#                     [0, 0, mp14, nq14],
#                     [Rload8, Lload8, mp15, nq15],
#                     [0, 0, mp16, nq16],
#                     [Rload9, Lload9, mp17, nq17],
#                     [0, 0, mp18, nq18],
#                     [Rload10, Lload10, mp19, nq19],
#                     [0, 0, mp20, nq20],
#                     ])

# rline = np.array(
#     [rline1, rline2, rline3, rline4, rline5, rline6, rline7, rline8, rline9, rline10, rline11, rline12, rline13,
#      rline14, rline15, rline16, rline17, rline18, rline19, rline20])
# Lline = np.array(
#     [Lline1, Lline2, Lline3, Lline4, Lline5, Lline6, Lline7, Lline8, Lline9, Lline10, Lline11, Lline12, Lline13,
#      Lline14, Lline15, Lline16, Lline17, Lline18, Lline19, Lline20])

# add 0, to meet the difference between MATLAB and python, shape=(201,)
x0 = np.array([0, 0, 0, 0, 0, 0,  # 1
               0, 0, 0, 0, 0,  # 2
               0, 0, 0, 0, 0,  # 3
               0, 0, 0, 0, 0,  # 4
               0, 0, 0, 0, 0,  # 5
               0, 0, 0, 0, 0,  # 6
               0, 0, 0, 0, 0,  # 7
               0, 0, 0, 0, 0,  # 8
               0, 0, 0, 0, 0,  # 9
               0, 0, 0, 0, 0,  # 10
               0, 0, 0, 0, 0,  # 11
               0, 0, 0, 0, 0,  # 12
               0, 0, 0, 0, 0,  # 13
               0, 0, 0, 0, 0,  # 14
               0, 0, 0, 0, 0,  # 15
               0, 0, 0, 0, 0,  # 16
               0, 0, 0, 0, 0,  # 17
               0, 0, 0, 0, 0,  # 18
               0, 0, 0, 0, 0,  # 19
               0, 0, 0, 0, 0,  # 20
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60,
               2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60,
               2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60,
               Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom,
               Vnom, Vnom, Vnom,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ])

# add 0, to meet the difference between MATLAB and python, shape=(201,)
x_critic = np.array([0, 0, 0, 0, 0, 0,  # 1
                     0, 0, 0, 0, 0,  # 2
                     0, 0, 0, 0, 0,  # 3
                     0, 0, 0, 0, 0,  # 4
                     0, 0, 0, 0, 0,  # 5
                     0, 0, 0, 0, 0,  # 6
                     0, 0, 0, 0, 0,  # 7
                     0, 0, 0, 0, 0,  # 8
                     0, 0, 0, 0, 0,  # 9
                     0, 0, 0, 0, 0,  # 10
                     0, 0, 0, 0, 0,  # 11
                     0, 0, 0, 0, 0,  # 12
                     0, 0, 0, 0, 0,  # 13
                     0, 0, 0, 0, 0,  # 14
                     0, 0, 0, 0, 0,  # 15
                     0, 0, 0, 0, 0,  # 16
                     0, 0, 0, 0, 0,  # 17
                     0, 0, 0, 0, 0,  # 18
                     0, 0, 0, 0, 0,  # 19
                     0, 0, 0, 0, 0,  # 20
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                     2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60,
                     2 * pi * 60,
                     2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60,
                     2 * pi * 60,
                     2 * pi * 60, 2 * pi * 60, 2 * pi * 60, 2 * pi * 60,
                     Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom, Vnom,
                     Vnom, Vnom,
                     Vnom,
                     Vnom, 0])

mp = np.array(
    [mp1, mp2, mp3, mp4, mp5, mp6, mp7, mp8, mp9, mp10, mp11, mp12, mp13, mp14, mp15, mp16, mp17, mp18, mp19, mp20])
nq = np.array(
    [nq1, nq2, nq3, nq4, nq5, nq6, nq7, nq8, nq9, nq10, nq11, nq12, nq13, nq14, nq15, nq16, nq17, nq18, nq19, nq20])

# obs_mean = np.array([[0.00000000e+00, -9.14813631e+03, -3.31591725e+03, -7.21426449e+00,
#                       -7.84226455e+00, 1.66465095e+00, -2.88780470e-01, 3.68844709e+02,
#                       -1.11991748e+01],
#                      [6.84265326e-03, -6.39558882e+03, -3.39077418e+03, -5.43962146e+00,
#                       -4.36695071e+00, 0.00000000e+00, 0.00000000e+00, 3.82012558e+02,
#                       -1.14084385e+01],
#                      [3.40638220e-02, -8.94311157e+03, -4.68673768e+03, 1.67147628e+01,
#                       -3.43492459e+00, 3.50456274e+00, 4.23178159e+00, 3.65834702e+02,
#                       -2.01416196e+01],
#                      [2.67765921e-02, -7.71014249e+03, -4.46706533e+03, -1.03813087e+01,
#                       -8.13896697e+00, 0.00000000e+00, 0.00000000e+00, 3.81781915e+02,
#                       -7.68215843e+00],
#                      [3.69470913e-02, -7.43880455e+03, -5.81017790e+03, 3.94995835e+00,
#                       -7.57235763e+00, 4.69315007e+00, 3.75455402e+00, 3.72994934e+02,
#                       1.70214059e+00],
#                      [5.84114893e-02, -6.47746107e+03, -3.45711528e+03, -1.01344238e+01,
#                       -1.18561405e-01, 0.00000000e+00, 0.00000000e+00, 3.78524171e+02,
#                       2.68269908e+01],
#                      [7.52745632e-02, -9.18448737e+03, -4.70813180e+03, 1.23651057e+01,
#                       8.95357078e+00, 4.65224204e+00, 1.09549876e+01, 3.73067320e+02,
#                       3.35570711e+01],
#                      [6.81209460e-02, -5.92006170e+03, -4.88774462e+03, -8.33043663e+00,
#                       -3.01335995e+00, 0.00000000e+00, 0.00000000e+00, 3.90472791e+02,
#                       5.33507121e+01],
#                      [8.33775869e-02, -9.90189063e+03, -3.99004411e+03, -1.28239475e+00,
#                       -2.67942480e+00, 5.21017323e+00, 1.21286619e+01, 3.69363230e+02,
#                       6.90067944e+01],
#                      [8.71832293e-02, -2.35338355e+03, -4.60819994e+03, 4.96240531e+00,
#                       -4.39319342e+00, 0.00000000e+00, 0.00000000e+00, 3.83642675e+02,
#                       7.83739212e+01],
#                      [6.59721412e-02, -9.09261464e+03, -4.99989233e+03, -1.19526226e+00,
#                       -1.68794067e+00, 4.36308686e+00, 1.06639579e+01, 3.71383540e+02,
#                       2.53025289e+01],
#                      [7.80090569e-02, -6.23316157e+03, -5.23549725e+03, 6.05100935e+00,
#                       5.66694913e+00, 0.00000000e+00, 0.00000000e+00, 3.81022408e+02,
#                       3.46967128e+01],
#                      [7.63758006e-02, -8.61603973e+03, -4.09919004e+03, -9.90249931e+00,
#                       3.39496884e+00, 6.39966913e+00, 1.05873840e+01, 3.71973218e+02,
#                       4.15188255e+01],
#                      [9.24545051e-02, -8.98077195e+03, -4.58323170e+03, 4.50161396e+00,
#                       -5.57943174e+00, 0.00000000e+00, 0.00000000e+00, 3.82180910e+02,
#                       8.21387369e+01],
#                      [9.45373461e-02, -4.93893299e+03, -4.56472118e+03, -4.46514466e+00,
#                       -4.02403734e+00, 2.80816509e+00, 1.70046119e+01, 3.73601864e+02,
#                       8.13259295e+01],
#                      [1.11365956e-01, -6.93944350e+03, -5.62989796e+03, 1.20579043e+01,
#                       2.97402587e+00, 0.00000000e+00, 0.00000000e+00, 3.82630240e+02,
#                       9.35513484e+01],
#                      [1.23621133e-01, -5.60026858e+03, -3.80664429e+03, 1.99403794e+00,
#                       -1.81071255e+00, 5.92491415e+00, 1.88604553e+01, 3.59580227e+02,
#                       9.40802141e+01],
#                      [1.29224778e-01, -5.94013128e+03, -4.69212691e+03, 3.25136264e+00,
#                       -8.28039639e-01, 0.00000000e+00, 0.00000000e+00, 3.73705652e+02,
#                       1.03756807e+02],
#                      [1.32278370e-01, -5.90254038e+03, -4.75364533e+03, 4.96227360e+00,
#                       -1.61324220e+00, 1.53551740e+00, 2.32021092e+01, 3.66241107e+02,
#                       1.03928877e+02],
#                      [1.39441209e-01, -3.14172805e+03, -3.57296482e+03, 4.30808557e+00,
#                       1.46557927e+00, 0.00000000e+00, 0.00000000e+00, 3.72387811e+02,
#                       1.48217036e+02]])
#
# obs_std = np.array([[1e-12, 2.29999720e+05, 5.94339502e+04, 6.04376318e+02,
#                      1.95941884e+02, 1.75075494e+01, 4.39537813e+01, 1.15052868e+01,
#                      2.70526491e+00],
#                     [5.75137540e-01, 2.57179276e+05, 5.42939249e+04, 5.88860564e+02,
#                      2.30300191e+02, 1e-12, 1e-12, 1.04272330e+01,
#                      9.50148917e+00],
#                     [7.78967000e-01, 2.69211004e+05, 8.24381094e+04, 7.46121258e+02,
#                      2.28133387e+02, 8.45829900e+01, 8.75547749e+01, 9.17498374e+00,
#                      1.39239251e+01],
#                     [5.60139491e-01, 2.90845361e+05, 5.12353029e+04, 5.73240526e+02,
#                      2.51574101e+02, 1e-12, 1e-12, 8.67562381e+00,
#                      1.53489325e+01],
#                     [5.90020995e-01, 2.25633890e+05, 7.96377985e+04, 7.49314352e+02,
#                      1.82274897e+02, 6.52901264e+01, 6.47875175e+01, 8.42438592e+00,
#                      1.74447971e+01],
#                     [6.32101119e-01, 2.68256931e+05, 6.72569103e+04, 7.66102309e+02,
#                      3.20105286e+02, 1e-12, 1e-12, 7.98286552e+00,
#                      2.62376624e+01],
#                     [5.98967544e-01, 3.11800607e+05, 6.19842909e+04, 6.79338393e+02,
#                      3.60503845e+02, 5.21198869e+01, 8.26247021e+01, 8.90744694e+00,
#                      2.75875012e+01],
#                     [5.97649248e-01, 2.44067738e+05, 6.95759661e+04, 6.09807287e+02,
#                      2.27529982e+02, 1e-12, 1e-12, 1.01630035e+01,
#                      3.00831950e+01],
#                     [5.45229045e-01, 2.38084096e+05, 5.80743473e+04, 5.56668111e+02,
#                      2.04580732e+02, 4.60049688e+01, 7.29530084e+01, 1.07794289e+01,
#                      3.11691706e+01],
#                     [5.55618611e-01, 2.64546109e+05, 5.26922992e+04, 5.73492982e+02,
#                      2.25403208e+02, 1e-12, 1e-12, 1.09857698e+01,
#                      3.31498063e+01],
#                     [6.30949565e-01, 2.86039564e+05, 8.27756676e+04, 7.91479378e+02,
#                      2.68390470e+02, 6.12317733e+01, 8.06161602e+01, 8.73822415e+00,
#                      2.75228155e+01],
#                     [6.50649268e-01, 3.36934786e+05, 6.11444994e+04, 6.68618265e+02,
#                      4.14914369e+02, 1e-12, 1e-12, 9.34995528e+00,
#                      2.98265740e+01],
#                     [7.30456791e-01, 2.68789487e+05, 7.42138775e+04, 7.22879270e+02,
#                      3.16779715e+02, 7.51160720e+01, 8.06238176e+01, 1.00009622e+01,
#                      3.06035478e+01],
#                     [6.39589454e-01, 2.23213579e+05, 8.98355407e+04, 7.41498468e+02,
#                      1.91247931e+02, 1e-12, 1e-12, 1.16817363e+01,
#                      3.34614424e+01],
#                     [4.87685071e-01, 2.71175899e+05, 3.98860654e+04, 5.28766670e+02,
#                      2.63727631e+02, 2.57931230e+01, 8.03198080e+01, 1.09674443e+01,
#                      3.35477872e+01],
#                     [6.54228553e-01, 2.56762549e+05, 8.25927044e+04, 7.06232489e+02,
#                      2.41018590e+02, 1e-12, 1e-12, 1.16378206e+01,
#                      3.60304568e+01],
#                     [6.54356997e-01, 2.36990071e+05, 7.33455877e+04, 6.53234280e+02,
#                      2.28559013e+02, 6.24124344e+01, 7.64103036e+01, 1.33367581e+01,
#                      3.84852708e+01],
#                     [4.99371630e-01, 2.62115877e+05, 4.77176504e+04, 5.15254513e+02,
#                      2.40036950e+02, 1e-12, 1e-12, 1.44899438e+01,
#                      4.19991849e+01],
#                     [5.54139857e-01, 2.07387350e+05, 6.83147145e+04, 6.31628748e+02,
#                      1.62510694e+02, 4.27772652e+01, 8.30212727e+01, 1.47125124e+01,
#                      4.33315494e+01],
#                     [5.53010319e-01, 7.04296378e+04, 3.94127022e+04, 2.23608894e+02,
#                      7.99926140e+01, 1e-12, 1e-12, 2.16280216e+01,
#                      4.39841241e+01]])

obs_mean = np.array([[0.00000000e+00, 6.29283743e+04, 3.07978839e+04, 1.32348191e+02,
                      -6.47528904e+01, 1.03796796e+02, -5.21592059e+01, 3.68194779e+02,
                      -1.20152670e+01],
                     [-4.93041786e-02, 6.30173923e+04, 1.68234121e+04, 1.27650177e+02,
                      -3.41183888e+01, 9.99311072e+01, -3.05826380e+01, 3.84754303e+02,
                      -2.75800537e+01],
                     [-4.83026940e-02, 6.30138967e+04, 2.64078047e+04, 1.30929256e+02,
                      -5.48771644e+01, 1.01772581e+02, -4.67882379e+01, 3.73359007e+02,
                      -2.59512455e+01],
                     [-8.82804061e-02, 6.31662493e+04, 1.48097410e+04, 1.27243570e+02,
                      -3.00282412e+01, 9.88151381e+01, -2.75418624e+01, 3.86580620e+02,
                      -3.58185231e+01],
                     [-1.53396305e-01, 6.32074782e+04, 2.45682959e+04, 1.30650136e+02,
                      -5.09303028e+01, 9.88664977e+01, -5.14727440e+01, 3.70418223e+02,
                      -5.65501408e+01],
                     [-1.65011027e-02, 4.73166932e+04, 1.84625127e+04, 9.69607871e+01,
                      -3.78968366e+01, 7.58555115e+01, -3.08587258e+01, 3.81494347e+02,
                      -1.44883493e+01],
                     [-7.03528928e-02, 4.73602159e+04, 2.49348027e+04, 9.90546714e+01,
                      -5.22085498e+01, 7.60480094e+01, -4.77392993e+01, 3.70103481e+02,
                      -3.20859402e+01],
                     [-7.80410413e-02, 4.74392625e+04, 1.68590902e+04, 9.67741550e+01,
                      -3.44178654e+01, 7.50861449e+01, -3.12799559e+01, 3.81936553e+02,
                      -3.18280343e+01],
                     [-9.81964209e-02, 4.74772788e+04, 2.48865169e+04, 9.92333620e+01,
                      -5.21513496e+01, 7.53031111e+01, -4.64068288e+01, 3.70441241e+02,
                      -3.64576923e+01],
                     [-1.52710271e-01, 4.75412263e+04, 1.36380038e+04, 9.60072464e+01,
                      -2.76367498e+01, 7.37299287e+01, -2.95498280e+01, 3.82774251e+02,
                      -5.52793130e+01],
                     [-6.63784012e-02, 6.30905432e+04, 2.42016821e+04, 1.30314870e+02,
                      -5.00216150e+01, 1.01273178e+02, -4.52626412e+01, 3.74384415e+02,
                      -3.10691635e+01],
                     [1.31971170e-02, 6.30522068e+04, 1.06244599e+04, 1.25673273e+02,
                      -2.12483097e+01, 9.79990848e+01, -1.29564891e+01, 3.93142820e+02,
                      -9.59958079e+00],
                     [9.89911093e-04, 6.30372815e+04, 2.22167508e+04, 1.29546967e+02,
                      -4.57372659e+01, 1.00918663e+02, -3.41846513e+01, 3.78791916e+02,
                      -9.59958079e+00],
                     [1.29618049e-01, 6.27656182e+04, 1.44435942e+04, 1.26417018e+02,
                      -2.92002087e+01, 9.71299612e+01, -1.42892440e+01, 3.84691938e+02,
                      2.45889420e+01],
                     [1.43425530e-01, 6.27289664e+04, 1.94882799e+04, 1.28056372e+02,
                      -4.00042387e+01, 9.88248607e+01, -2.35289490e+01, 3.77023871e+02,
                      2.75940875e+01],
                     [-5.75664523e-02, 4.74206821e+04, 1.52145138e+04, 9.62322446e+01,
                      -3.09076068e+01, 7.50619493e+01, -2.75737065e+01, 3.84408967e+02,
                      -2.60070071e+01],
                     [-4.62132310e-02, 4.74006002e+04, 2.24274566e+04, 9.83433097e+01,
                      -4.65498907e+01, 7.62699283e+01, -4.00471076e+01, 3.74414440e+02,
                      -2.20451640e+01],
                     [3.50348076e-02, 4.73514947e+04, 9.46583650e+03, 9.44818202e+01,
                      -1.89488035e+01, 7.35617397e+01, -1.25175327e+01, 3.92288555e+02,
                      3.46725897e+00],
                     [9.29765789e-02, 4.72303747e+04, 2.63115101e+04, 9.92533169e+01,
                      -5.53249064e+01, 7.80638969e+01, -3.85288092e+01, 3.68578201e+02,
                      1.52290973e+01],
                     [2.44430771e-01, 4.71629073e+04, 1.22011703e+03, 9.19220885e+01,
                      -2.49415110e+00, 6.66335088e+01, 1.07921775e+01, 3.94242595e+02,
                      6.97643296e+01]])

obs_std = np.array([[1e-12, 4.20343356e+03, 4.85700984e+03, 8.49569114e+00,
                     1.04435108e+01, 3.09905688e+01, 1.64983659e+01, 1.07705269e+02,
                     3.62599666e+00],
                    [3.53208644e-02, 4.07268993e+03, 3.18474039e+03, 7.27486594e+00,
                     6.59024116e+00, 2.94062352e+01, 1.07673233e+01, 1.12420029e+02,
                     1.43182321e+01],
                    [4.50219271e-02, 4.07628579e+03, 3.84826542e+03, 7.78605599e+00,
                     8.02164152e+00, 2.99804139e+01, 1.58040164e+01, 1.08851426e+02,
                     1.57230310e+01],
                    [1.08836450e-01, 4.19079661e+03, 5.57892569e+03, 8.56541981e+00,
                     1.16624186e+01, 2.88013185e+01, 1.74233657e+01, 1.12298972e+02,
                     3.36366445e+01],
                    [1.37059517e-01, 4.33290558e+03, 6.12791477e+03, 9.14265967e+00,
                     1.33285040e+01, 2.80931036e+01, 2.36151694e+01, 1.07532260e+02,
                     4.17724974e+01],
                    [7.36926786e-03, 3.19718414e+03, 2.92929707e+03, 5.97164442e+00,
                     6.09308020e+00, 2.25476621e+01, 9.85390513e+00, 1.11499200e+02,
                     5.05572909e+00],
                    [2.78848864e-02, 3.11031174e+03, 3.97391116e+03, 5.79699603e+00,
                     8.91482441e+00, 2.22632525e+01, 1.49408615e+01, 1.08441720e+02,
                     1.35471693e+01],
                    [8.25305955e-02, 3.04606208e+03, 2.92804158e+03, 5.75932221e+00,
                     6.03682404e+00, 2.19137623e+01, 1.16520326e+01, 1.11262948e+02,
                     2.60898841e+01],
                    [9.79098227e-02, 3.09173758e+03, 5.23944524e+03, 6.58828741e+00,
                     1.15435474e+01, 2.17736019e+01, 1.89274478e+01, 1.07758569e+02,
                     2.97496664e+01],
                    [1.37595975e-01, 3.22258710e+03, 4.08098380e+03, 6.47070128e+00,
                     8.53185325e+00, 2.09757867e+01, 1.47363294e+01, 1.11029807e+02,
                     4.25592585e+01],
                    [8.21029285e-02, 4.00905106e+03, 3.80086720e+03, 7.79257515e+00,
                     8.12332877e+00, 2.96808581e+01, 1.55003639e+01, 1.09240975e+02,
                     2.52447521e+01],
                    [1.02595739e-01, 4.03706055e+03, 2.49241366e+03, 7.33073790e+00,
                     4.97502660e+00, 2.93381675e+01, 9.14063564e+00, 1.14486565e+02,
                     2.99601396e+01],
                    [1.07966938e-01, 4.05754667e+03, 4.11356167e+03, 8.05455891e+00,
                     8.76190441e+00, 3.01553432e+01, 1.54748166e+01, 1.10186587e+02,
                     2.99601396e+01],
                    [1.38518044e-01, 4.22761865e+03, 3.50591976e+03, 6.62981281e+00,
                     7.38719628e+00, 2.95937703e+01, 1.50819504e+01, 1.12070762e+02,
                     4.20976493e+01],
                    [1.44113015e-01, 4.28464751e+03, 6.48124316e+03, 6.51512713e+00,
                     1.41503352e+01, 3.01614611e+01, 1.94874888e+01, 1.10038587e+02,
                     4.35260379e+01],
                    [8.27426818e-02, 3.01275981e+03, 2.29503144e+03, 5.45061519e+00,
                     4.72076804e+00, 2.20351945e+01, 9.73276151e+00, 1.12169970e+02,
                     2.48839111e+01],
                    [8.48676710e-02, 3.01884033e+03, 2.93932933e+03, 5.51880851e+00,
                     6.35914398e+00, 2.24510839e+01, 1.33921664e+01, 1.09320916e+02,
                     2.41679942e+01],
                    [1.09723468e-01, 3.06290265e+03, 2.10642429e+03, 5.12431400e+00,
                     4.27448769e+00, 2.20158690e+01, 9.04678262e+00, 1.14585687e+02,
                     3.18676060e+01],
                    [1.30148700e-01, 3.14843530e+03, 3.05573700e+03, 5.70614986e+00,
                     6.79232126e+00, 2.42166221e+01, 1.54501623e+01, 1.07152775e+02,
                     3.70785000e+01],
                    [1.47446439e-01, 3.23645184e+03, 3.54838371e+03, 4.82558091e+00,
                     7.05528823e+00, 2.06150534e+01, 1.21554693e+01, 1.14626963e+02,
                     5.10992820e+01]])
